--Shapes_Spec
package Shapes is
   type Length_T is new Natural;
   type Lengths_T is array (Positive range <>) of Length_T;
   subtype Description_T is String (1 .. 10);

   type Shape_T is abstract tagged record
      Description : Description_T;
   end record;
   function Get_Description (Shape : Shape_T'Class) return Description_T;
   function Number_Of_Sides (Shape : Shape_T) return Natural is abstract;
   function Perimeter (Shape : Shape_T) return Length_T is abstract;

   type Quadrilateral_T is new Shape_T with record
      Lengths : Lengths_T (1 .. 4);
   end record;
   function Number_Of_Sides (Shape : Quadrilateral_T) return Natural;
   function Perimeter (Shape : Quadrilateral_T) return Length_T;

   type Square_T is new Quadrilateral_T with null record;
   function Perimeter (Shape : Square_T) return Length_T;

   type Triangle_T is new Shape_T with record
      Lengths : Lengths_T (1 .. 3);
   end record;
   function Number_Of_Sides (Shape : Triangle_T) return Natural;
   function Perimeter (Shape : Triangle_T) return Length_T;
end Shapes;
--Shapes_Spec

--Shapes_Body
package body Shapes is

   function Perimeter (Lengths : Lengths_T) return Length_T is
      Ret_Val : Length_T := 0;
   begin
      for I in Lengths'First .. Lengths'Last loop
         Ret_Val := Ret_Val + Lengths (I);
      end loop;
      return Ret_Val;
   end Perimeter;

   function Get_Description (Shape : Shape_T'Class) return Description_T is
   begin
      return Shape.Description;
   end Get_Description;

   function Number_Of_Sides (Shape : Quadrilateral_T) return Natural is
   begin
      return 4;
   end Number_Of_Sides;
   function Perimeter (Shape : Quadrilateral_T) return Length_T is
   begin
      return Perimeter (Shape.Lengths);
   end Perimeter;

   function Perimeter (Shape : Square_T) return Length_T is
   begin
      return 4 * Shape.Lengths (Shape.Lengths'First);
   end Perimeter;

   function Number_Of_Sides (Shape : Triangle_T) return Natural is
   begin
      return 3;
   end Number_Of_Sides;
   function Perimeter (Shape : Triangle_T) return Length_T is
   begin
      return Perimeter (Shape.Lengths);
   end Perimeter;
end Shapes;
--Shapes_Body

--Main
with Ada.Text_IO; use Ada.Text_IO;
with Shapes;      use Shapes;
procedure Main is

   Rectangle : constant Shapes.Quadrilateral_T :=
     (Description => "rectangle ",
      Lengths     => (10, 20, 10, 20));
   Triangle : constant Shapes.Triangle_T :=
     (Description => "triangle  ",
      Lengths     => (200, 300, 400));
   Square : constant Shapes.Square_T :=
     (Description => "square    ",
      Lengths     => (5_000, 5_000, 5_000, 5_000));

   procedure Describe (Shape : Shapes.Shape_T'Class) is
   begin
      Put_Line (Shapes.Get_Description (Shape));
      if Shape not in Shapes.Shape_T
      then
         Put_Line
           ("  Number of sides:" &
            Integer'Image (Shapes.Number_Of_Sides (Shape)));
         Put_Line
           ("  Perimeter:" & Shapes.Length_T'Image (Shapes.Perimeter (Shape)));
      end if;
   end Describe;
begin

   Describe (Rectangle);
   Describe (Triangle);
   Describe (Square);
end Main;
--Main
