=====
Lab
=====

-------------------
Flow Analysis Lab
-------------------

- Find the :filename:`050_flow_analysis` sub-directory in :filename:`source`

   + You can copy it locally, or work with it in-place

- In that directory, open the project :filename:`lab.gpr` in :toolname:`GNAT Studio`

   + Or, on the command-line, do :command:`gnatstudio -P lab.gpr`

- Unfold the source code directory (.) in the project pane

----------------------------------------
Aliasing and Initialization - Messages
----------------------------------------

.. container:: animate 1-

   - Find and open the files :filename:`basics.ads` and :filename:`basics.adb` in :toolname:`GNAT Studio`
   - Study the code and see if you can predict what's wrong.

      + These examples illustrate the basic forms of flow analysis in SPARK.

   - Use :menu:`SPARK` |rightarrow| :menu:`Examine File...` to analyze the body of package `Basics`.
   - Click on the :menu:`Locations` tab to see the messages (organized by unit).
   - Make sure you understand the check messages that :toolname:`GNATprove` produces.

.. container:: animate 2-

   ::

      basics.adb:17:13: medium: formal parameters "X" and "Y" might be aliased (SPARK RM 6.4.2)
      basics.ads:25:26: medium: "T" might not be initialized in "Init_Table"

   * We want to fix the code, or add an annotation to prevent the messages

      * We do not want any messages from our analysis.

-------------------------------------
Aliasing and Initialization - Fixes
-------------------------------------

.. container:: animate 1-

   * Problem 1 - ``formal parameters "X" and "Y" might be aliased``

      * Hint: if we prevent **Swap** from being called when **I** and **J** are equal,
        we can safely add an anotation indicating this is a false positive

.. container:: animate 2-

   .. code:: Ada

      if I /= J then
         Swap (T (I), T (J));
         pragma Annotate (GNATprove, False_Positive,
                          "formal parameters * might be aliased",
                          "I /= J so T(I) and T(J) cannot alias");
      end if;

.. container:: animate 1-

   * Problem 2 - ``"T" might not be initialized in "Init_Table"``

      * Hint: We need to initialize the array in a way that the analysis
        knows the entire array was initialized

.. container:: animate 3-

   .. code:: Ada

      T := (others => 0);
      T (T'First) := 1;
      T (T'Last) := 2;

-------------------
Data Dependencies
-------------------

- Run flow analysis. Right-click in the package spec to display the contextual menu.
  Display the data dependencies generated by :toolname:`GNATprove` with the
  contextual menu :menu:`SPARK` |rightarrow| :menu:`Globals` |rightarrow|
  :menu:`Show generated Global contracts`.

  + Study the generated contracts and make sure you understand them.

- Add a null data dependencies contracts with aspect :ada:`Global => null` to
  all subprograms.

- Run flow analysis. Make sure you understand the check messages that
  :toolname:`GNATprove` produces.

- Add correct data dependencies contracts with aspect :ada:`Global` to all
  subprograms.

  + The objective is to get no messages when running :toolname:`GNATprove`.

- Rerun :toolname:`GNATprove` with checkbox :menu:`Report checks proved` selected.

  + Review the info messages and make sure you understand them.

- Modify the code or contracts and check that :toolname:`GNATprove` detects
  mismatches between them. Make sure you understand the check messages that
  :toolname:`GNATprove` produces.
