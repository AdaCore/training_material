************************
CodePeer Customization
************************

..
    Coding language

.. role:: ada(code)
    :language: Ada

.. role:: C(code)
    :language: C

.. role:: cpp(code)
    :language: C++

..
    Math symbols

.. |rightarrow| replace:: :math:`\rightarrow`
.. |forall| replace:: :math:`\forall`
.. |exists| replace:: :math:`\exists`
.. |equivalent| replace:: :math:`\iff`
.. |le| replace:: :math:`\le`
.. |ge| replace:: :math:`\ge`
.. |lt| replace:: :math:`<`
.. |gt| replace:: :math:`>`

..
    Miscellaneous symbols

.. |checkmark| replace:: :math:`\checkmark`

==============
Introduction
==============

---------------
Customization
---------------

+ Ways to customize :toolname:`CodePeer` execution

  + Skip problematic files
  + Specify database and output locations
  + Include compiler warnings and :toolname:`gnatcheck` messages

============================
External Tools Integration
============================

---------------
GNAT Warnings
---------------

+ GNAT warnings can be generated by :toolname:`CodePeer`

  :code:`--gnat-warnings=xxx` *(uses -gnatwxxx)*

+ Messages are stored in the database

    - Displayed and filtered as any other message

+ Manual justification

    - Can be stored in the database
    - Done via :ada:`pragma Warnings` instead of :ada:`pragma Annotate`

--------------------
GNATcheck messages
--------------------

+ :toolname:`GNATcheck` messages can be generated by :toolname:`CodePeer`

  :code:`--gnatcheck`

+ Uses the :toolname:`GNATcheck` rules file

    - Defined in your project file in :ada:`package Check`

+ Messages are stored in the database

    - Displayed and filtered as any other message

+ Manual justification

    - Can be stored in the database
    - Done via :ada:`pragma Annotate (GNATcheck, ...)`

============================
Finding the Right Settings
============================

---------------------
System Requirements
---------------------

+ Fast 64-bit machine with multiple cores and memory

  + **Server** :math:`\rightarrow` 24 to 48 cores with at least 2GB per core (48 to 96GB)
  + **Local desktop** :math:`\rightarrow` 4 to 8 cores, with at least 8 to 16GB

+ **Avoid slow filesystems**

  + Network drives (NFS, SMB)
  + Configuration management filesystems (e.g. ClearCase dynamic views).
  + If not possible, at least generate output file in a local disk via the *Output_Directory* and *Database_Directory* project attributes.

+ **Global analysis (-level max)** :math:`\rightarrow` At least 12GB + 1GB per 10K SLOC, e.g. At least 32GB for 200K SLOC.

-----------------------------------
Finding a Suitable Analysis Level
-----------------------------------

+ Start with default (level 0)
+ Check number of **false positives**
+ Check number of **interesting** messages
+ Check **duration** of analysis
+ If these conditions are OK

    + Increase level (eg. level 1) and iterate

.. code:: Ada

   project My_Project is
      ...
      package CodePeer is
         for Switches use ("-level", "1");
      end CodePeer;
   end My_Project;

:command:`codepeer -Pmy_project --level 1 ...`

-----------------------------------
Search For Common Coding Patterns
-----------------------------------

+ Runs contain many messages

  + **Sample** them
  + **Identify** groups of **false positives**
  + **Exclude** them by categories

    + Using :code:`--infer-messages` for :toolname:`infer` (level 0)
    + Using :code:`--be-messages` for :toolname:`CodePeer` (level 1+)

+ For example, to disable messages related to access check:

   :code:`--be-messages=-access_check`

--------------------------------------
Filter Out Unwanted Messages / Units
--------------------------------------

+ Filtering of messages

  + :command:`--output-msg` :command:`--hide-low` on the command line
  + Check boxes to filter on message category / rank in :toolname:`GNAT Studio` and HTML
  + :code:`--infer-messages` :code:`--be-messages` :code:`--gnat-warnings`  switches
  + :command:`--messages min/normal/max`

+ You can exclude a :ada:`package` or a subprogram from analysis

    + :ada:`pragma Annotate (CodePeer, Skip_Analysis)`

--------------------------
Examine Messages By Rank
--------------------------

+ Choose relevant messages based on ranking (severity :math:`\times` certainty)

  + **High** :math:`\rightarrow` certain problem
  + **Medium** :math:`\rightarrow` possible problem, or certain with low severity
  + **Low** :math:`\rightarrow` less likely problem (yet useful for exhaustivity)

+ When analysing messages

    + Start with **High** rank
    + Then **Medium** rank
    + Finally **Low** rank if needed / time available

+ Considering only High and Medium is recommended

    + Default in :toolname:`GNAT Studio` and HTML interfaces

---------------------
Run CodePeer Faster
---------------------

+ Hardware

    + 64-bit machine
    + Large amounts of memory
    + Large number of cores

+ Command-line switches

    + Lower analysis level :command:`--level <num>`
    + Paralellize :command:`-j0` (default)

+ Identify files taking too long to analyze

    + Disable analysis of their packages, subprograms or files

| ``analyzed main.scil in 0.05 seconds``
| ``analyzed main__body.scil in 620.31 seconds``
| ``analyzed pack1__body.scil in 20.02 seconds``
| ``analyzed pack2__body.scil in 5.13 seconds``

-----------------------------
Code-Based Partial Analysis
-----------------------------

+ Excluding subprograms or packages from analysis
+ :ada:`pragma Annotate (CodePeer, Skip_Analysis)`

.. code:: Ada

   procedure Complex_Subprogram (...) is
      pragma Annotate (CodePeer, Skip_Analysis);
   begin
      ...
   end Complex_Subprogram;

   package Complex_Package is
      pragma Annotate (CodePeer, Skip_Analysis);
      ...
   end Complex_Package;

--------------------------------
Project-Based Partial Analysis
--------------------------------

+ Excluding Files From Analysis

   .. code:: Ada

      package CodePeer is
         for Excluded_Source_Files use ( "xxx.adb" );
         -- Analysis generates lots of timeouts, skip for now
      end CodePeer;

+ Excluding Directories From Analysis

   .. code:: Ada

      package CodePeer is
         for Excluded_Source_Dirs use ("directory1",
                                       "directory2");
      end CodePeer;

+ Excluding Projects From Analysis

   .. code:: Ada

      for Externally_Built use "True";

==============================
Justifying CodePeer Messages
==============================

------------------------
Database Justification
------------------------

+ Add review status in database

  + :toolname:`GNAT Studio`: select review icon on message(s)
  + HTML web server: click on :menu:`Add Review` button above messages
  + Displayed with :command:`--output-msg-only --show-reviews (-only)`

+ Can run :toolname:`CodePeer` as a server

  + Share the database on network
  + :command:`codepeer --ide-server --port=8080`

+ Access the IDE server from :toolname:`GNAT Studio`

  + Set the project file to the following

  .. code:: Ada

   package CodePeer is
      for Server_URL use "http://server:8080";
   end CodePeer;

-----------------------
In-Code Justification
-----------------------

+ Add message review pragma in code
+ :ada:`pragma Annotate` added next to code with message

  + Also added in the database

  False_Positive
    Condition in question cannot occur

  :ada:`Intentional`
    Condition is justified by a design choice

.. code:: Ada

   ...
   return (X + Y) / (X - Y);
   pragma Annotate (CodePeer,
                    False_Positive,
                    "Divide By Zero",
                    "reviewed by John Smith");

-------------------------------
Outside Tooling Justification
-------------------------------

+ Use spreadsheet tool

  + Export messages in CSV format

     :command:`codepeer -Pprj --output-msg-only --csv`

  + Review them via the spreadsheet tool (e.g. Excel)

    + Beware: Fill **all** the columns

  + Import back CSV reviews into the :toolname:`CodePeer` database

     :command:`codepeer_bridge --import-reviews`

+ Use external justification connected to output

  + Textual output: compiler-like messages or CSV format
