with Ada.Containers.Bounded_Vectors;
with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;
package City_Trivia is

  package Strings_Vector is new Ada.Containers.Bounded_Vectors
   (Index_Type => Natural, Element_Type => Unbounded_String);
  subtype Strings_Vector_T is Strings_Vector.Vector (100);

  procedure Add_Trivia
   (City        : String;
    Information : String);

  function Get_Trivia
   (City : String)
    return Strings_Vector_T;
  function Get_Keys return Strings_Vector_T;

  package Sort is new Strings_Vector.Generic_Sorting;

end City_Trivia;
with Ada.Containers.Bounded_Ordered_Maps;
package body City_Trivia is

  use type Strings_Vector_T;
  package Maps is new Ada.Containers.Bounded_Ordered_Maps
   (Key_Type => Unbounded_String, Element_Type => Strings_Vector_T);
  use type Maps.Cursor;
  Map : Maps.Map (100);

  procedure Add_Trivia
   (City        : String;
    Information : String) is
    Key    : Unbounded_String := To_Unbounded_String (City);
    Info   : Unbounded_String := To_Unbounded_String (Information);
    Cursor : Maps.Cursor;
  begin
    Cursor := Map.Find (Key);
    if Cursor = Maps.No_Element then
      declare
        To_Insert : Strings_Vector_T;
      begin
        To_Insert.Append (Info);
        Map.Insert
         (Key      => Key,
          New_Item => To_Insert);
      end;
    else
      declare
        Current : Strings_Vector_T;
      begin
        Current := Maps.Element (Cursor);
        Current.Append (Info);
        Map.Replace_Element
         (Position => Cursor,
          New_Item => Current);
      end;
    end if;
  end Add_Trivia;

  function Get_Trivia
   (City : String)
    return Strings_Vector_T is
    Ret_Val : Strings_Vector_T;
    Key     : Unbounded_String := To_Unbounded_String (City);
    Cursor  : Maps.Cursor;
  begin
    Cursor := Map.Find (Key);
    if Cursor /= Maps.No_Element then
      Ret_Val := Maps.Element (Cursor);
    end if;
    Sort.Sort (Ret_Val);
    return Ret_Val;
  end Get_Trivia;

  function Get_Keys return Strings_Vector_T is
    Ret_Val : Strings_Vector_T;
    Cursor  : Maps.Cursor := Map.First;
  begin
    while Cursor /= Maps.No_Element loop
      declare
        To_Append : Unbounded_String := Maps.Key (Cursor);
      begin
        Ret_Val.Append (To_Append);
      end;
      exit when Cursor = Map.Last;
      Cursor := Maps.Next (Cursor);
    end loop;
    return Ret_Val;
  end Get_Keys;

end City_Trivia;
with Ada.Containers.Generic_Sort;
with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;
with Ada.Text_IO;           use Ada.Text_IO;
with City_Trivia;
procedure Main is

  Trivia : City_Trivia.Strings_Vector_T;
  Keys   : City_Trivia.Strings_Vector_T;

  function Get
   (Prompt : String)
    return String is
  begin
    Put (Prompt & "> ");
    return Get_Line;
  end Get;

begin

  Outer_Loop :
  loop
    declare
      City : constant String := Get ("City name");
    begin
      exit Outer_Loop when City'Length = 0;
      Inner_Loop :
      loop
        declare
          Info : constant String := Get ("  Trivia");
        begin
          exit Inner_Loop when Info'Length = 0;
          City_Trivia.Add_Trivia
           (City        => City,
            Information => Info);
        end;
      end loop Inner_Loop;
    end;
  end loop Outer_Loop;

  Keys := City_Trivia.Get_Keys;
  City_Trivia.Sort.Sort (Keys);
  for Key of Keys loop
    Trivia := City_Trivia.Get_Trivia (To_String (Key));
    Put_Line (To_String (Key));
    for Info of Trivia loop
      Put_Line ("   " & To_String (Info));
    end loop;
  end loop;

end Main;
