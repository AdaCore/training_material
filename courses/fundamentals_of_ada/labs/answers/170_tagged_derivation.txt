--Types_Body
with Ada.Text_IO; use Ada.Text_IO;
package body Employee is
   procedure Set_Name (O     : in out Person_T;
                       Value :        String) is
   begin
      O.Name := To_Unbounded_String (Value);
   end Set_Name;
   function Name (O : Person_T) return String is
   begin
      return To_String (O.Name);
   end Name;
   procedure Set_Birth_Date (O     : in out Person_T;
                             Value :        String) is
   begin
      O.Birth_Date := To_Unbounded_String (Value);
   end Set_Birth_Date;
   function Birth_Date (O : Person_T) return String is
   begin
      return To_String (O.Birth_Date);
   end Birth_Date;
   procedure Print (O : Person_T) is
   begin
      Put_Line ("Name: " & Name (O));
      Put_Line ("Birthdate: " & Birth_Date (O));
   end Print;
   procedure Set_Start_Date (O     : in out Employee_T;
                             Value :        String) is
   begin
      O.Start_Date := To_Unbounded_String (Value);
   end Set_Start_Date;
   function Start_Date (O : Employee_T) return String is
   begin
      return To_String (O.Start_Date);
   end Start_Date;
   procedure Print (O : Employee_T) is
   begin
      Put_Line ("Name: " & Name (O));
      Put_Line ("Birthdate: " & Birth_Date (O));
      Put_Line ("Startdate: " & Start_Date (O));
   end Print;
   procedure Set_Job (O     : in out Position_T;
                      Value :        String) is
   begin
      O.Job := To_Unbounded_String (Value);
   end Set_Job;
   function Job (O : Position_T) return String is
   begin
      return To_String (O.Job);
   end Job;
   procedure Print (O : Position_T) is
   begin
      Put_Line ("Name: " & Name (O));
      Put_Line ("Birthdate: " & Birth_Date (O));
      Put_Line ("Startdate: " & Start_Date (O));
      Put_Line ("Job: " & Job (O));
   end Print;
end Employee;
--Types_Body
--Types_Spec
with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;
package Employee is
   type Person_T is tagged private;
   procedure Set_Name (O     : in out Person_T;
                       Value :        String);
   function Name (O : Person_T) return String;
   procedure Set_Birth_Date (O     : in out Person_T;
                             Value :        String);
   function Birth_Date (O : Person_T) return String;
   procedure Print (O : Person_T);
   type Employee_T is new Person_T with private;
   procedure Set_Start_Date (O     : in out Employee_T;
                             Value :        String);
   function Start_Date (O : Employee_T) return String;
   procedure Print (O : Employee_T);
   type Position_T is new Employee_T with private;
   procedure Set_Job (O     : in out Position_T;
                      Value :        String);
   function Job (O : Position_T) return String;
   procedure Print (O : Position_T);
private
   type Person_T is tagged record
      Name       : Unbounded_String;
      Birth_Date : Unbounded_String;
   end record;
   type Employee_T is new Person_T with record
      Employee_Id : Positive;
      Start_Date  : Unbounded_String;
   end record;
   type Position_T is new Employee_T with record
      Job : Unbounded_String;
   end record;
end Employee;
--Types_Spec
with Ada.Characters.Handling; use Ada.Characters.Handling;
with Ada.Text_IO;             use Ada.Text_IO;
package body Input is
   function Get_String
     (Prompt : String)
      return String is
      Str  : String (1 .. 100);
      Last : Integer;
   begin
      Put (Prompt & " > ");
      Ada.Text_IO.Get_Line (Str, Last);
      return Str (1 .. Last);
   end Get_String;
   function Get_Number
     (Prompt : String)
      return Integer_T is
   begin
      loop
         declare
            Retval : constant String := Get_String (Prompt);
         begin
            if Retval'length > 0 then
               return Integer_T'value (Retval);
            else
               raise Input_Canceled;
            end if;
         exception
            when others =>
               Put_Line ("Invalid input");
         end;
      end loop;
   end Get_Number;
   function Get_Enum
     (Prompt : String)
      return Enum_T is
   begin
      for E in Enum_T'range loop
         Put_Line
           (Integer'image (1 + Enum_T'pos (E)) & "> " & Enum_T'image (E));
      end loop;
      loop
         declare
            I : constant String := Get_String (Prompt);
         begin
            if I'length = 0 then
               raise Input_Canceled;
            end if;
            return Enum_T'val (Natural'value (I) - 1);
         exception
            when Input_Canceled =>
               raise Input_Canceled;
            when others =>
               Put_Line ("Illegal value");
         end;
      end loop;
   end Get_Enum;
   function Internal_Get_Integer is new Get_Number (Integer);
   function Internal_Get_Natural is new Get_Number (Natural);
   function Internal_Get_Positive is new Get_Number (Positive);
   function Get_Integer
     (Prompt : String)
      return Integer renames Internal_Get_Integer;
   function Get_Natural
     (Prompt : String)
      return Natural renames Internal_Get_Natural;
   function Get_Positive
     (Prompt : String)
      return Positive renames Internal_Get_Positive;
end Input;
package Input is
   Input_Canceled : exception;
   function Get_String
     (Prompt : String)
      return String;
   function Get_Integer
     (Prompt : String)
      return Integer;
   function Get_Natural
     (Prompt : String)
      return Natural;
   function Get_Positive
     (Prompt : String)
      return Positive;
   generic
      type Enum_T is (<>);
   function Get_Enum
     (Prompt : String)
      return Enum_T;
   generic
      type Integer_T is range <>;
   function Get_Number
     (Prompt : String)
      return Integer_T;
end Input;
--Main
with Ada.Text_IO; use Ada.Text_IO;
with Employee;    use Employee;
with Input;       use Input;
procedure Main is
   Applicant : Employee.Person_T;
   Employ    : Employee.Employee_T;
   Staff     : Employee.Position_T;
begin
   Set_Name (Applicant, Get_String ("Applicant name"));
   Set_Birth_Date (Applicant, Get_String ("   Birth Date (YYYY-MM-DD)"));
   Set_Name (Employ, Get_String ("Employee name"));
   Set_Birth_Date (Employ, Get_String ("   Birth Date (YYYY-MM-DD)"));
   Set_Start_Date (Employ, Get_String ("   Start Date (YYYY-MM-DD)"));
   Set_Name (Staff, Get_String ("Staff name"));
   Set_Birth_Date (Staff, Get_String ("   Birth Date (YYYY-MM-DD)"));
   Set_Start_Date (Staff, Get_String ("   Start Date (YYYY-MM-DD)"));
   Set_Job (Staff, Get_String ("   Job"));
   Print (Applicant);
   Print (Employ);
   Print (Staff);
end Main;
--Main
