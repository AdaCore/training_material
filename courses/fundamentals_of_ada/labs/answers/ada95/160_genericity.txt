package Data_Type is
   type Record_T is record
      Integer_Field   : Integer;
      Character_Field : Character;
   end record;

   function ">" (L, R : Record_T) return Boolean;

   function Image (Element : Record_T) return String;

end Data_Type;

package body Data_Type is

   function ">" (L, R : Record_T) return Boolean is
   begin
      if L.Character_Field > R.Character_Field then
         return True;
      elsif L.Character_Field < R.Character_Field then
         return False;
      else
         return L.Integer_Field > R.Integer_Field;
      end if;
   end ">";

   function Image (Element : Record_T) return String is
   begin
      return Element.Character_Field & " =>" &
             Integer'Image (Element.Integer_Field);
   end Image;

end Data_Type;

--Generic_List_Spec
generic
   type Element_T is private;
   Max_Size : Natural;
   with function ">" (L, R : Element_T) return Boolean;
   with function Image (Element : Element_T) return String;
package Generic_List is

   type List_T is private;

   procedure Add (This : in out List_T;
                  Item : in     Element_T);
   procedure Sort (This : in out List_T);
   procedure Print (List : List_T);

private
   subtype Index_T is Natural range 0 .. Max_Size;
   type List_Array_T is array (1 .. Index_T'Last) of Element_T;

   type List_T is record
      Values : List_Array_T;
      Length : Index_T := 0;
   end record;
end Generic_List;
--Generic_List_Spec

--Generic_List_Body
with Ada.Text_IO; use Ada.Text_IO;
package body Generic_List is

   procedure Add (This : in out List_T;
                  Item : in     Element_T) is
   begin
      This.Length               := This.Length + 1;
      This.Values (This.Length) := Item;
   end Add;

   procedure Sort (This : in out List_T) is
      Temp : Element_T;
   begin
      for I in 1 .. This.Length loop
         for J in 1 .. This.Length - I loop
            if This.Values (J) > This.Values (J + 1) then
               Temp                := This.Values (J);
               This.Values (J)     := This.Values (J + 1);
               This.Values (J + 1) := Temp;
            end if;
         end loop;
      end loop;
   end Sort;

   procedure Print (List : List_T) is
   begin
      for I in 1 .. List.Length loop
         Put_Line (Integer'Image (I) & ") " & Image (List.Values (I)));
      end loop;
   end Print;

end Generic_List;
--Generic_List_Body

--Main
with Data_Type;
with Generic_List;
procedure Main is
   package List is new Generic_List (Element_T => Data_Type.Record_T,
                                     Max_Size  => 20,
                                     ">"       => Data_Type.">",
                                     Image     => Data_Type.Image);

   My_List : List.List_T;
   Element : Data_Type.Record_T;

begin
   List.Add (My_List, (Integer_Field   => 111,
                       Character_Field => 'a'));
   List.Add (My_List, (Integer_Field    => 111,
                       Character_Field => 'z'));
   List.Add (My_List, (Integer_Field    => 111,
                       Character_Field => 'A'));
   List.Add (My_List, (Integer_Field    => 999,
                       Character_Field => 'B'));
   List.Add (My_List, (Integer_Field    => 999,
                       Character_Field => 'Y'));
   List.Add (My_List, (Integer_Field    => 999,
                       Character_Field => 'b'));
   List.Add (My_List, (Integer_Field    => 112,
                       Character_Field => 'a'));
   List.Add (My_List, (Integer_Field    => 998,
                       Character_Field => 'z'));

   List.Sort (My_List);
   List.Print (My_List);
end Main;
--Main
