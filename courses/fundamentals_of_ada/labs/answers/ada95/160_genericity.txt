package Data_Type is
  type Record_T is tagged record
    Field1 : Integer;
    Field2 : Character;
  end record;
  function "<" (L, R : Record_T) return Boolean;
  function Image (Element : Record_T) return String;
end Data_Type;

package body Data_Type is
   function "<" (L, R : Record_T) return Boolean is
   begin
      if L.Field2 < R.Field2 then
         return True;
      elsif L.Field2 > R.Field2 then
         return False;
      else
         return L.Field1 < R.Field1;
      end if;
   end "<";

   function Image (Element : Record_T) return String is
   begin
      return Element.Field2 & " =>" & Integer'Image (Element.Field1);
   end Image;
end Data_Type;

--Generic_List_Spec
generic
  type Element_T is private;
  Max_Size : Natural;
  with function "<" (L, R : Element_T) return Boolean;
package Generic_List is

  type List_T is tagged private;

  procedure Add (This : in out List_T;
                 Item : in     Element_T);
  procedure Sort (This : in out List_T);

private
  subtype Index_T is Natural range 0 .. Max_Size;
  type List_Array_T is array (1 .. Index_T'Last) of Element_T;

  type List_T is tagged record
    Values : List_Array_T;
    Length : Index_T := 0;
  end record;
end Generic_List;
--Generic_List_Spec
--Generic_List_Body
package body Generic_List is

  procedure Add (This : in out List_T;
                 Item : in     Element_T) is
  begin
    This.Length               := This.Length + 1;
    This.Values (This.Length) := Item;
  end Add;

  procedure Sort (This : in out List_T) is
    Temp : Element_T;
  begin
    for I in 1 .. This.Length loop
      for J in I + 1 .. This.Length loop
        if This.Values (J) < This.Values (J - 1) then
          Temp                := This.Values (J);
          This.Values (J)     := This.Values (J - 1);
          This.Values (J - 1) := Temp;
        end if;
      end loop;
    end loop;
  end Sort;
end Generic_List;
--Generic_List_Body
--Generic_Output
generic
  with function Image (Element : Element_T) return String;
package Generic_List.Output is
  procedure Print (List : List_T);
end Generic_List.Output;

with Ada.Text_IO; use Ada.Text_IO;
package body Generic_List.Output is
  procedure Print (List : List_T) is
  begin
    for I in 1 .. List.Length loop
      Put_Line (Integer'Image (I) & ") " &
                Image (List.Values (I)));
    end loop;
  end Print;
end Generic_List.Output;
--Generic_Output
--Main
with Ada.Text_IO; use Ada.Text_IO;
with Data_Type;
with Generic_List;
with Generic_List.Output;
use type Data_Type.Record_T;
procedure Main is
  package List is new Generic_List (Data_Type.Record_T, 10, "<");
  package Output is new List.Output (Data_Type.Image);

  function Get_Line return String is
    S : String (1 .. 100);
    L : Integer;
  begin
    Get_Line (S, L);
    return S (1 .. L);
  end Get_Line;

  My_List : List.List_T;
  Element : Data_Type.Record_T;

begin
  loop
    Put ("Enter character: ");
    declare
      Str : constant String := Get_Line;
    begin
      exit when Str'Length = 0;
      Element.Field2 := Str (1);
    end;
    Put ("Enter number: ");
    declare
      Str : constant String := Get_Line;
    begin
      exit when Str'Length = 0;
      Element.Field1 := Integer'Value (Str);
    end;
    List.Add (My_List, Element);
  end loop;

  List.Sort (My_List);
  Output.Print (My_List);
end Main;
--Main
