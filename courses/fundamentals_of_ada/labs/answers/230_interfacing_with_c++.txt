--IO_Body
with Interfaces.C;
with Interfaces.C.Strings;
with Ada.Text_IO;
package body Io is
   function C_Gets return Interfaces.C.Strings.chars_ptr;
   pragma Import (C, C_Gets, "gets");
   function Read_From_Stdin return String is
   begin
      return Interfaces.C.Strings.Value (C_Gets);
   end Read_From_Stdin;
   procedure C_Putchar (Str : Interfaces.C.char);
   pragma Import (C, C_Putchar, "putchar");
   procedure Write_To_Stdout (Str : String) is
   begin
      for I in Str'range loop
         C_Putchar (Interfaces.C.To_C (Str (I)));
      end loop;
   end Write_To_Stdout;
   function C_Fopen (Filename : Interfaces.C.char_array;
                     Mode     : Interfaces.C.char_array)
                     return File_T;
   pragma Import (C, C_Fopen, "fopen");
   function Create_File (Filename : String) return File_T is
   begin
      return C_Fopen (Interfaces.C.To_C (Filename), Interfaces.C.To_C ("w"));
   end Create_File;
   procedure C_Fputs (Str  : Interfaces.C.Strings.chars_ptr;
                      File : File_T);
   pragma Import (C, C_Fputs, "fputs");
   procedure Write_To_File (File : File_T;
                            Str  : String) is
                            To_C : Interfaces.C.Strings.chars_ptr;
   begin
      To_C := Interfaces.C.Strings.New_String (Str & ASCII.LF);
      C_Fputs (To_C, File);
      Interfaces.C.Strings.Free (To_C);
   end Write_To_File;
   procedure C_Fclose (File : File_T);
   pragma Import (C, C_Fclose, "fclose");
   procedure Close_File (File : File_T) is
   begin
      C_Fclose (File);
   end Close_File;
end Io;
--IO_Body
--IO_Spec
with System;
package Io is
   type File_T is private;
   function Read_From_Stdin return String;
   procedure Write_To_Stdout (Str : String);
   function Create_File (Filename : String) return File_T;
   procedure Write_To_File (File : File_T;
                            Str  : String);
   procedure Close_File (File : File_T);
private
   type File_T is access all Integer;
end Io;
--IO_Spec
--Main
with Ada.Exceptions;
with Io; use Io;
procedure Main is
   function Get (Prompt : String) return String is
   begin
      Io.Write_To_Stdout (Prompt & ">");
      return Io.Read_From_Stdin;
   end Get;
begin
   declare
      Filename : constant String    := Get ("Filename");
      File_Ptr : constant Io.File_T := Io.Create_File (Filename);
   begin
      loop
         declare
            Str : constant String := Get ("Line");
         begin
            exit when Str'length = 0;
            Io.Write_To_File (File_Ptr, Str);
         end;
      end loop;
      Io.Close_File (File_Ptr);
   end;
end Main;
--Main
