with Ada.Text_IO; use Ada.Text_IO;
procedure Main is

   type List_T is array (Integer range <>) of Integer;

   --Search
   function Is_Found (List : List_T;
                      Item : Integer)
                      return Boolean is
   begin
      if List'Length = 0 then
         return False;
      elsif List'Length = 1 then
         return List (List'First) = Item;
      else
         declare
            Midpoint : constant Integer := (List'First + List'Last) / 2;
         begin
            if List (Midpoint) = Item then
               return True;
            elsif List (Midpoint) > Item then
               return Is_Found (List
                      (List'First .. Midpoint - 1), Item);
            else -- List(Midpoint) < item
               return Is_Found (List
                      (Midpoint + 1 .. List'Last), Item);
            end if;
         end;
      end if;
   end Is_Found;
   --Search

   --Sort
   procedure Sort (List : in out List_T) is
      Swapped : Boolean;
      procedure Swap (I, J : in Integer) is
         Temp : Integer := List (I);
      begin
         List (I) := List (J);
         List (J) := Temp;
         Swapped  := True;
      end Swap;
   begin
      for I in List'First .. List'Last loop
         Swapped := False;
         for J in 1 .. List'Last - I loop
            if List (J) > List (J + 1)
            then
               Swap (J, J + 1);
            end if;
         end loop;
         if not Swapped then
            return;
         end if;
      end loop;
   end Sort;
   --Sort

--Main
   procedure Fill (List : out List_T) is
   begin
      Put_Line ("Enter values for list: ");
      for I in List'First .. List'Last
      loop
         List (I) := Integer'Value (Get_Line);
      end loop;
   end Fill;

   Number : Integer;

begin

   Put ("Enter number of elements in list: ");
   Number := Integer'Value (Get_Line);

   declare
      List : List_T (1 .. Number);
   begin
      Fill (List);
      Sort (List);
      loop
         Put ("Enter number to look for: ");
         Number := Integer'Value (Get_Line);
         exit when Number < 0;
         Put_Line (Boolean'Image (Is_Found (List, Number)));
      end loop;
   end;

end Main;
--Main
