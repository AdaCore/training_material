--Messages
package Messages is
   type Message_T is private;

   procedure Set_Content (Message : in out Message_T;
                          Value   :        Integer);
   function Content (Message : Message_T) return Integer;
   function Image (Message : Message_T) return String;

private
   type Message_Content_T;
   type Message_T is access Message_Content_T;
end Messages;

package body Messages is
   type Message_Content_T is new Integer;

   procedure Set_Content (Message : in out Message_T;
                          Value   :        Integer) is
      New_Value : constant Message_Content_T := Message_Content_T (Value);
   begin
      if Message = null then
         Message := new Message_Content_T'(New_Value);
      else
         Message.all := New_Value;
      end if;
   end Set_Content;

   function Content (Message : Message_T) return Integer is
   begin
      return Integer (Message.all);
   end Content;
   function Image (Message : Message_T) return String is
   begin
      return "**" & Message_Content_T'image (Message.all);
   end Image;
end Messages;
--Messages
--List_Types
package Messages.List_Types is
   type List_T is private;
private
   type List_Content_T;
   type List_T is access List_Content_T;
   type Id_Type is range 1_000 .. 9_999;
   type List_Content_T is record
      Id      : Id_Type;
      Content : Message_T;
      Next    : List_T;
   end record;
end Messages.List_Types;
--List_Types

with Messages.List_Types;
--Operations
package Messages.List_Types.Operations is
   procedure Append (List : in out List_T;
                     Item :        Message_T);
   function Next (List : List_T) return List_T;
   function Is_Null (List : List_T) return Boolean;
   function Image (Message : List_T) return String;
end Messages.List_Types.Operations;

package body Messages.List_Types.Operations is
   Id : Id_Type := Id_Type'First;

   procedure Append (List : in out List_T;
                     Item :        Message_T) is
   begin
      if List = null then
         List := new List_Content_T'(Id => Id, Content => Item, Next => null);
      else
         List.Next := new List_Content_T'(Id => Id, Content => Item, Next => null);
      end if;
      Id := Id_Type'Succ (Id);
   end Append;

   function Next (List : List_T) return List_T is
   begin
      return List.Next;
   end Next;
   function Is_Null (List : List_T) return Boolean is
   begin
      return List = null;
   end Is_Null;

   function Image (Message : List_T) return String is
   begin
      if Is_Null (Message) then
         return "" & ASCII.LF;
      else
         return "id: " & Id_Type'Image (Message.Id) & " => " &
           Image (Message.Content) & ASCII.LF & Image (Message.Next);
      end if;
   end Image;
end Messages.List_Types.Operations;
--Operations

--Main
with Ada.Text_IO;
with Messages;
with Messages.List_Types;
with Messages.List_Types.Operations;
procedure Main is
   package Types renames Messages.List_Types;
   package Operations renames Messages.List_Types.Operations;

   List : Types.List_T;
   Head : Types.List_T;

   function Convert (Value : Integer) return Messages.Message_T is
      Ret_Value : Messages.Message_T;
   begin
      Messages.Set_Content (Ret_Value, Value);
      return Ret_Value;
   end Convert;

   procedure Add_One (Value : Integer) is
   begin
      Operations.Append (List, Convert (Value));
      List := Operations.Next (List);
   end Add_One;

begin
   Operations.Append (List, Convert (1));
   Head := List;
   Add_One (23);
   Add_One (456);
   Add_One (78);
   Add_One (9);
   Ada.Text_IO.Put_Line (Operations.Image (Head));
end Main;
--Main
