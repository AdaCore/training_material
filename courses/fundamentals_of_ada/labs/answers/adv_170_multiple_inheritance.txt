--Types
package Base_Types is

   type Coordinate_T is record
      X_Coord : Integer;
      Y_Coord : Integer;
   end record;
   function Image (Coord : Coordinate_T) return String is
     ("(" & Coord.X_Coord'Image & "," &
            Coord.Y_Coord'Image & " )");

   type Line_T is array (1 .. 2) of Coordinate_T;
   type Lines_T is array (Natural range <>) of Line_T;

   type Color_T is mod 256;
   type Width_T is range 1 .. 10;

end Base_Types;
--Types

--Shapes
with Base_Types;
package Geometry is

   -- Create a tagged type to define shapes
   type Object_T is abstract tagged private;

   -- Create accessor functions for some common component
   function Origin (Object : Object_T'Class) return Base_Types.Coordinate_T;

private

   type Object_T is abstract tagged record
      The_Origin : Base_Types.Coordinate_T;
   end record;

   function Origin (Object : Object_T'Class) return Base_Types.Coordinate_T is
      (Object.The_Origin);

end Geometry;
--Shapes

--Drawing_Spec
with Base_Types;
package Line_Draw is

   type Object_T is interface;

   -- Create accessor functions for some line attributes
   procedure Set_Color (Object : in out Object_T;
                        Color  : in     Base_Types.Color_T)
         is abstract;
   function Color (Object : Object_T) return Base_Types.Color_T
         is abstract;

   procedure Set_Pen_Width (Object : in out Object_T;
                            Width  : in     Base_Types.Width_T)
         is abstract;
   function Pen_Width (Object : Object_T) return Base_Types.Width_T
         is abstract;

   function Convert (Object : Object_T) return Base_Types.Lines_T
         is abstract;

   procedure Print (Object : Object_T'Class);

end Line_Draw;
--Drawing_Spec

--Drawing_Body
with Ada.Text_IO;
package body Line_Draw is

   procedure Print (Object : Object_T'Class) is
      Lines : constant Base_Types.Lines_T := Object.Convert;
   begin
      for Index in Lines'Range loop
         Ada.Text_IO.Put_Line ("Line" & Index'Image);
         Ada.Text_IO.Put_Line
           ("  From: " & Base_Types.Image (Lines (Index) (1)));
         Ada.Text_IO.Put_Line
           ("    To: " & Base_Types.Image (Lines (Index) (2)));
      end loop;
   end Print;

end Line_Draw;
--Drawing_Body

--Printable_Object
with Geometry;
with Line_Draw;
with Base_Types;
package Printable_Object is
   type Object_T is
     abstract new Geometry.Object_T and Line_Draw.Object_T with private;
   procedure Set_Color (Object : in out Object_T;
                        Color  :        Base_Types.Color_T);
   function Color (Object : Object_T) return Base_Types.Color_T;

   procedure Set_Pen_Width (Object : in out Object_T;
                            Width  :        Base_Types.Width_T);
   function Pen_Width (Object : Object_T) return Base_Types.Width_T;
private
   type Object_T is
   abstract new Geometry.Object_T and Line_Draw.Object_T with record
      The_Color     : Base_Types.Color_T := 0;
      The_Pen_Width : Base_Types.Width_T := 1;
   end record;
end Printable_Object;

package body Printable_Object is
   procedure Set_Color (Object : in out Object_T;
                        Color  :        Base_Types.Color_T) is
   begin
      Object.The_Color := Color;
   end Set_Color;
   function Color (Object : Object_T) return Base_Types.Color_T is (Object.The_Color);

   procedure Set_Pen_Width (Object : in out Object_T;
                            Width  :        Base_Types.Width_T) is
   begin
      Object.The_Pen_Width := Width;
   end Set_Pen_Width;
   function Pen_Width (Object : Object_T) return Base_Types.Width_T is (Object.The_Pen_Width);
end Printable_Object;
--Printable_Object

--Rectangle
with Base_Types;
with Printable_Object;

package Rectangle is
   subtype Lines_T is Base_Types.Lines_T (1 .. 4);

   type Object_T is new Printable_Object.Object_T with private;

   procedure Set_Lines (Object : in out Object_T;
                        Lines  :        Lines_T);
   function Lines (Object : Object_T) return Lines_T;

private

   type Object_T is new Printable_Object.Object_T with record
      Lines : Lines_T;
   end record;

   function Convert (Object : Object_T) return Base_Types.Lines_T is
      (Object.Lines);
end Rectangle;

package body Rectangle is
   procedure Set_Lines (Object : in out Object_T;
                        Lines  :        Lines_T) is
   begin
      Object.Lines := Lines;
   end Set_Lines;

   function Lines (Object : Object_T) return Lines_T is (Object.Lines);
end Rectangle;
--Rectangle

--Main
with Base_Types;
with Rectangle;
procedure Main is

   Object : Rectangle.Object_T;
   Line1  : constant Base_Types.Line_T :=
            ((1, 1), (1, 10));
   Line2  : constant Base_Types.Line_T :=
            ((6, 6), (6, 15));
   Line3  : constant Base_Types.Line_T :=
            ((1, 1), (6, 6));
   Line4  : constant Base_Types.Line_T :=
            ((1, 10), (6, 15));
begin
   Object.Set_Lines ((Line1, Line2, Line3, Line4));
   Object.Print;
end Main;
