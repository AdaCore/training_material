--Math
package Simple_Math is
  type Float_T is digits 6 range -1_000.0 .. 1_000.0;

  Illegal_Operation : exception;

  function Sqrt (X : Float_T) return Float_T;
  function Square (X : Float_T) return Float_T;

  function Multiply (L, R : Float_T) return Float_T;
  function Divide (N, D : Float_T) return Float_T;
end Simple_Math;

with Ada.Numerics.Generic_Elementary_Functions;
package body Simple_Math is
  package Math is new Ada.Numerics.Generic_Elementary_Functions (Float_T);

  function Sqrt (X : Float_T) return Float_T is
   (if X >= 0.0 then Math.Sqrt (X)
    else raise Illegal_Operation with "negative number");
  function Square (X : Float_T) return Float_T is
  begin
    if abs (X) < 1.0 then
      return X * X;
    elsif (Float_T'Last / X) < X then
      raise Illegal_Operation with "number too large";
    else
      return X * X;
    end if;
  end Square;

  function Multiply (L, R : Float_T) return Float_T is (L * R);
  function Divide (N, D : Float_T) return Float_T is (N / D);
end Simple_Math;
--Math

with Ada.Exceptions;
with Ada.Text_IO; use Ada.Text_IO;
with Simple_Math;
procedure Main is
   package Io is new Ada.Text_IO.Float_IO (Simple_Math.Float_T);

   function Get
     (Prompt : String)
      return Simple_Math.Float_T is
   begin
      Put ("  " & Prompt & " => ");
      return Simple_Math.Float_T'Value (Get_Line);
   end Get;

--Main_Partial
   procedure Test_Square_Root (Number : Simple_Math.Float_T) is
   begin
      Io.Put (Simple_Math.Sqrt (Number), Exp => 0);
      New_Line;
   exception
      when Error : Simple_Math.Illegal_Operation =>
         Put_Line (Ada.Exceptions.Exception_Message (Error));
      when Error : others =>
         Put_Line (Ada.Exceptions.Exception_Information (Error));
   end Test_Square_Root;

   procedure Test_Square (Number : Simple_Math.Float_T) is
   begin
      Put_Line ("Square");
      Io.Put (Simple_Math.Square (Number), Exp => 0);
      New_Line;
   exception
      when Error : Simple_Math.Illegal_Operation =>
         Put_Line (Ada.Exceptions.Exception_Message (Error));
      when Error : others =>
         Put_Line (Ada.Exceptions.Exception_Information (Error));
   end Test_Square;

   procedure Test_Multiply (Left  : Simple_Math.Float_T;
                            Right : Simple_Math.Float_T) is
   begin
      Io.Put (Simple_Math.Multiply (Left, Right), Exp => 0);
      New_Line;
   exception
      when Error : Simple_Math.Illegal_Operation =>
         Put_Line (Ada.Exceptions.Exception_Message (Error));
      when Error : others =>
         Put_Line (Ada.Exceptions.Exception_Information (Error));
   end Test_Multiply;

   procedure Test_Divide (Numerator   : Simple_Math.Float_T;
                          Denominator : Simple_Math.Float_T) is
   begin
      Io.Put (Simple_Math.Divide (Numerator, Denominator), Exp => 0);
      New_Line;
   exception
      when Error : Simple_Math.Illegal_Operation =>
         Put_Line (Ada.Exceptions.Exception_Message (Error));
      when Error : others =>
         Put_Line (Ada.Exceptions.Exception_Information (Error));
   end Test_Divide;
--Main_Partial

begin

   Put_Line ("Test_Square_Root");
   Test_Square_Root (Get ("Number"));
   Put_Line ("Test_Square");
   Test_Square (Get ("Number"));
   Put_Line ("Test_Multiply");
   Test_Multiply (Get ("Left"), Get ("right"));
   Put_Line ("Test_Divide");
   Test_Divide (Get ("Numerator"), Get ("Denominator"));

exception
   when The_Err : others =>
      Put_Line
        ("Other error: " & Ada.Exceptions.Exception_Information (The_Err));

end Main;
