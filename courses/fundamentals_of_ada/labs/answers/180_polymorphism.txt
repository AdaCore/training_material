--Main
with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;
with Ada.Text_IO;           use Ada.Text_IO;
with Shapes;                use Shapes;
procedure Main is
   Rectangle : Shapes.Quadrilateral_T :=
     (Description => To_Unbounded_String ("rectangle"),
      Sides       => ((0.0, 10.0), (0.0, 20.0), (1.0, 20.0), (1.0, 10.0)));
   Triangle : Shapes.Triangle_T :=
     (Description => To_Unbounded_String ("triangle"),
      Sides       => ((0.0, 0.0), (0.0, 3.0), (4.0, 0.0)));
   Square : Shapes.Square_T :=
     (Description => To_Unbounded_String ("square"),
      Sides       => ((0.0, 1.0), (0.0, 2.0), (1.0, 2.0), (1.0, 1.0)));
   procedure Describe (Shape : Shapes.Shape_T'class) is
   begin
      Put_Line (Get_Description (Shape));
      if Shape not in Shapes.Shape_T then
         Put_Line
           ("  Number of sides:" & Integer'image (Number_Of_Sides (Shape)));
         Put_Line ("  Perimeter:" & Shapes.Float_T'image (Perimeter (Shape)));
      end if;
   end Describe;
begin
   Describe (Rectangle);
   Describe (Triangle);
   Describe (Square);
end Main;
--Main
--Shapes_Body
with Ada.Numerics.Generic_Elementary_Functions;
package body Shapes is
   package Math is new Ada.Numerics.Generic_Elementary_Functions (Float_T);
   function Distance (Vertex1 : Vertex_T;
                      Vertex2 : Vertex_T)
                      return Float_T is
   begin
      return Math.Sqrt ((Vertex1.X - Vertex2.X)**2 + (Vertex1.Y - Vertex2.Y)**2);
   end Distance;
   function Perimeter (Vertices : Vertices_T) return Float_T is
      Ret_Val : Float_T := 0.0;
   begin
      for I in Vertices'first .. Vertices'last - 1 loop
         Ret_Val := Ret_Val + Distance (Vertices (I), Vertices (I + 1));
      end loop;
      Ret_Val :=
        Ret_Val +
        Distance (Vertices (Vertices'last), Vertices (Vertices'first));
      return Ret_Val;
   end Perimeter;
   function Get_Description (Shape : Shape_T'class) return String is
   begin
      return To_String (Shape.Description);
   end Get_Description;
   function Number_Of_Sides (Shape : Quadrilateral_T) return Natural is
   begin
      return 4;
   end Number_Of_Sides;
   function Perimeter (Shape : Quadrilateral_T) return Float_T is
   begin
      return Perimeter (Shape.Sides);
   end Perimeter;
   function Perimeter (Shape : Square_T) return Float_T is
   begin
      return 4.0 * Distance (Shape.Sides (1), Shape.Sides (2));
   end Perimeter;
   function Number_Of_Sides (Shape : Triangle_T) return Natural is
   begin
      return 3;
   end Number_Of_Sides;
   function Perimeter (Shape : Triangle_T) return Float_T is
   begin
      return Perimeter (Shape.Sides);
   end Perimeter;
end Shapes;
--Shapes_Body
--Shapes_Spec
with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;
package Shapes is
   type Float_T is digits 6;
   type Vertex_T is record
      X : Float_T;
      Y : Float_T;
   end record;
   type Vertices_T is array (Positive range <>) of Vertex_T;
   type Shape_T is abstract tagged record
      Description : Unbounded_String;
   end record;
   function Get_Description (Shape : Shape_T'class) return String;
   function Number_Of_Sides (Shape : Shape_T) return Natural is abstract;
   function Perimeter (Shape : Shape_T) return Float_T is abstract;
   type Quadrilateral_T is new Shape_T with record
      Sides : Vertices_T (1 .. 4);
   end record;
   function Number_Of_Sides (Shape : Quadrilateral_T) return Natural;
   function Perimeter (Shape : Quadrilateral_T) return Float_T;
   type Square_T is new Quadrilateral_T with null record;
   function Perimeter (Shape : Square_T) return Float_T;
   type Triangle_T is new Shape_T with record
      Sides : Vertices_T (1 .. 3);
   end record;
   function Number_Of_Sides (Shape : Triangle_T) return Natural;
   function Perimeter (Shape : Triangle_T) return Float_T;
end Shapes;
--Shapes_Spec
