package Colors is

  type Color_T is (Red, Yellow, Green, Blue, Black);
  type Color_Set_T is private;

  Empty_Set : constant Color_Set_T;

  procedure Add
   (Set   : in out Color_Set_T;
    Color :        Color_T);
  procedure Remove
   (Set   : in out Color_Set_T;
    Color :        Color_T);
  function Union
   (Set1, Set2 : Color_Set_T)
    return Color_Set_T;
  function Intersection
   (Set1, Set2 : Color_Set_T)
    return Color_Set_T;

  function Image
   (Set : Color_Set_T)
    return String;

private
  type Color_Set_Array_T is array (Color_T) of Boolean;
  type Color_Set_T is record
    Values : Color_Set_Array_T := (others => False);
  end record;

  Empty_Set : constant Color_Set_T := (Values => (others => False));

end Colors;
package body Colors is

  procedure Add
   (Set   : in out Color_Set_T;
    Color :        Color_T) is
  begin
    Set.Values (Color) := True;
  end Add;
  procedure Remove
   (Set   : in out Color_Set_T;
    Color :        Color_T) is
  begin
    Set.Values (Color) := False;
  end Remove;
  function Union
   (Set1, Set2 : Color_Set_T)
    return Color_Set_T is
    Ret_Val : Color_Set_T;
  begin
    for Color in Color_T loop
      Ret_Val.Values (Color) :=
       Set1.Values (Color) or else Set2.Values (Color);
    end loop;
    return Ret_Val;
  end Union;

  function Intersection
   (Set1, Set2 : Color_Set_T)
    return Color_Set_T is
    Ret_Val : Color_Set_T;
  begin
    for Color in Color_T loop
      Ret_Val.Values (Color) :=
       Set1.Values (Color) and then Set2.Values (Color);
    end loop;
    return Ret_Val;
  end Intersection;

  function Image
   (Set   : Color_Set_T;
    First : Color_T;
    Last  : Color_T)
    return String is
    Str : constant String :=
     (if Set.Values (First) then Color_T'Image (First) else "");
  begin
       if First = Last then
         return Str;
       else
         return Str & " " & Image (Set, Color_T'Succ (First), Last);
       end if;
  end Image;

  function Image
   (Set : Color_Set_T)
    return String is
  begin
    return Image (Set, Color_T'First, Color_T'Last);
  end Image;

end Colors;
with Ada.Strings.Unbounded; use Ada.Strings.Unbounded;
with Colors;
package Flags is

  type Map_Element_T is private;
  type Map_T is private;

  procedure Add
   (Map         : in out Map_T;
    Key         :        String;
    Description :        Colors.Color_Set_T;
    Success     :    out Boolean);
  procedure Remove
   (Map     : in out Map_T;
    Key     :        String;
    Success :    out Boolean);
  procedure Modify
   (Map         : in out Map_T;
    Key         :        String;
    Description :        Colors.Color_Set_T;
    Success     :    out Boolean);
  function Exists
   (Map : Map_T;
    Key : String)
    return Boolean;

  function Get
   (Map : Map_T;
    Key : String)
    return Map_Element_T;

  function Image
   (Item : Map_Element_T)
    return String;

  function Image
   (Flag : Map_T)
    return String;

private
  type Map_Element_T is record
    Key         : Unbounded_String   := Null_Unbounded_String;
    Description : Colors.Color_Set_T := Colors.Empty_Set;
  end record;
  type Map_Array_T is array (1 .. 100) of Map_Element_T;
  type Map_T is record
    Values : Map_Array_T;
    Length : Natural := 0;
  end record;

end Flags;
package body Flags is

  procedure Add
   (Map         : in out Map_T;
    Key         :        String;
    Description :        Colors.Color_Set_T;
    Success     :    out Boolean) is

  begin
    Success := (for all Item of Map.Values
       (1 .. Map.Length) => Item.Key /= Key);
    if Success then
      declare
        New_Item : Map_Element_T :=
         (Key => To_Unbounded_String (Key), Description => Description);
      begin
        Map.Length              := Map.Length + 1;
        Map.Values (Map.Length) := New_Item;
      end;
    end if;
  end Add;

  procedure Remove
   (Map     : in out Map_T;
    Key     :        String;
    Success :    out Boolean) is
  begin
    Success := False;
    for I in 1 .. Map.Length loop
      if Map.Values (I).Key = Key then
        Map.Values
         (I .. Map.Length - 1) := Map.Values
          (I + 1 .. Map.Length);
        Success := True;
        exit;
      end if;
    end loop;
  end Remove;

  procedure Modify
   (Map         : in out Map_T;
    Key         :        String;
    Description :        Colors.Color_Set_T;
    Success     :    out Boolean) is
  begin
    Success := False;
    for I in 1 .. Map.Length loop
      if Map.Values (I).Key = Key then
        Map.Values (I).Description := Description;
        Success                    := True;
        exit;
      end if;
    end loop;
  end Modify;

  function Exists
   (Map : Map_T;
    Key : String)
    return Boolean is (for some Item of Map.Values
     (1 .. Map.Length) => Item.Key = Key);

  function Get
   (Map : Map_T;
    Key : String)
    return Map_Element_T is
    Ret_Val : Map_Element_T;
  begin
    for I in 1 .. Map.Length loop
      if Map.Values (I).Key = Key then
        Ret_Val := Map.Values (I);
        exit;
      end if;
    end loop;
    return Ret_Val;
  end Get;

  function Image
   (Item : Map_Element_T)
    return String is
   (To_String (Item.Key) & " => " & Colors.Image (Item.Description));

  function Image
   (Flag : Map_T)
    return String is
    Ret_Val : Unbounded_String := Null_Unbounded_String;
  begin
    for Item of Flag.Values
     (1 .. Flag.Length) loop
      Ret_Val := Ret_Val & Image (Item) & ASCII.LF;
    end loop;
    return To_String (Ret_Val);
  end Image;

end Flags;
with Colors;
package Input is

  function Get return Colors.Color_Set_T;

end Input;
with Ada.Text_IO; use Ada.Text_IO;
package body Input is

  function Get return Colors.Color_Set_T is
    Ret_Val : Colors.Color_Set_T;
  begin
    Put ("Enter color(s) ( ");
    for C in Colors.Color_T loop
      Put (Colors.Color_T'Image (C) & " ");
    end loop;
    Put_Line ("): ");
    loop
      declare
        Str : constant String := Get_Line;
      begin
        exit when Str'Length = 0;
        Colors.Add (Ret_Val, Colors.Color_T'Value (Str));
      end;
    end loop;
    return Ret_Val;
  end Get;

end Input;
with Ada.Text_IO; use Ada.Text_IO;
with Colors;
with Flags;
with Input;
procedure Main is

  Map : Flags.Map_T;

begin

  loop
    Put ("Enter country name: ");
    declare
      Str         : constant String := Get_Line;
      Description : Colors.Color_Set_T;
      Success     : Boolean;
    begin
      exit when Str'Length = 0;
      Description := Input.Get;
      if Flags.Exists (Map, Str) then
        Flags.Modify (Map, Str, Description, Success);
      else
        Flags.Add (Map, Str, Description, Success);
      end if;
    end;
  end loop;

  Put_Line (Flags.Image (Map));

end Main;
