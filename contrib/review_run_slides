#!/usr/bin/env python3
script_description = """
Finds and downloads the latest build for the given branch, and the given course.
Downloads it and opens it in a viewer for review.

If the course is in the process of being built, then the script waits for it to
be over (this behaviour can be disabled through the command-line switches).
"""

requirements = """
You should have the `gh` GitHub CLI installed (https://cli.github.com/)
You should then run attach the repo to the github URL through:
`git remote set-url github git@github.com:AdaCore/training_material.git`

On WSL: To get the PDF view to open, mailcap must be set up for PDFs. This can be done via:
`echo "application/pdf; wslview %s" >> ~/.mailcap`
"""

from epycs.subprocess import cmd, ShellProgramFilters
from argparse import ArgumentParser
from pathlib import Path
import json
import toml
import shutil
import time
import sys

ROOT = Path(__file__).resolve().parents[1]
OUT = ROOT / "out"

DEFAULT_COURSE_DOWNLOAD = "Fundamentals Of Ada - Standard Course"


def get_current_git_branch():
    return cmd.git("rev-parse", "--abbrev-ref", "HEAD", out_filter=str)[:-1]


def gh_run(*a, **kw):
    ckw = {"out_filter": str}
    ckw.update(kw)
    return cmd.gh("run", *a, **ckw)


def gh_latest_run(
    branch,
    fields=[
        "status",
        "createdAt",
        "name",
        "headBranch",
        "databaseId",
        "url",
        "conclusion",
    ],
):
    js = json.loads(gh_run("list", "--json", ",".join(fields)))

    def find_first_by_headBranch(runs, branch):
        for run in runs:
            if run["headBranch"] == branch:
                return run
        else:
            return None

    return find_first_by_headBranch(js, branch)


def gh_run_download(run_id, name, directory):
    gh_run("download", run_id, "-n", name, "-D", directory, out_filter=None)


def run_watch(run_id, course):
    def gh_run_view_filter(s):
        STATUS, JOBS, ANNOTATIONS, ARTIFACTS = range(4)
        state = STATUS

        run = {"jobs": [], "annotations": [], "artifacts": []}
        for l in s.splitlines():
            if l:
                if state == STATUS:
                    if l == "JOBS":
                        state = JOBS
                    elif "status" not in run:
                        run["status"] = l

                elif state == JOBS:
                    if l == "ANNOTATIONS":
                        state = ANNOTATIONS
                    elif l == "ARTIFACTS":
                        state = ARTIFACTS
                    else:
                        run["jobs"].append(l)

                elif state == ANNOTATIONS:
                    if l == "ARTIFACTS":
                        state = ARTIFACTS
                    else:
                        run["annotations"].append(l)

                elif state == ARTIFACTS:
                    run["artifacts"].append(l)
        return run

    None_Running, None_Finished, Artifact = range(3)

    def gh_run_has_artifact(run_id, artifact):
        run = cmd.gh("run", "view", run_id, out_filter=gh_run_view_filter)
        if artifact in run["artifacts"]:
            return Artifact
        elif run["status"][0] == "âœ“":
            return None_Finished
        else:
            return None_Running

    r = gh_run_has_artifact(run_id, course)
    while r == None_Running:
        print(".", end="")
        sys.stdout.flush()
        time.sleep(1)
        r = gh_run_has_artifact(run_id, course)

    return r == Artifact


def capitalize_words(s):
    upper = True
    r = ""
    for c in s:
        if upper:
            r += c.upper()
        else:
            r += c.lower()
        upper = c == " "
    return r


def main():
    ap = ArgumentParser(description=script_description)
    ap.add_argument(
        "course",
        nargs="?",
        help="Course to download, can be the full name of the artifact, or the path to a txt or rst that should be downloaded. It can also be unset, in which case the script will try to guess it from your current repository state (it's not too smart at it though).",
    )
    ap.add_argument("branch", nargs="?")
    ap.add_argument(
        "-W",
        "--do-not-wait",
        action="store_true",
        help="do not wait for completion of the run",
    )
    args = ap.parse_args()

    """
    We have four options
    1. course is set to the name of an artifact: in which case nothing to change
    2. course is set to the name of a local file:
       2a. If the file is a txt: download the associated course by knowing its name from the config file
       2b. If the file is a rst: download the bundle from github (just the name of the course), and look at the associated pdf.
    3. course is unset, and there is a DO_NOT_MERGE.SINGLE_COURSE: use it as the name of a file (see above for how to handle it)
    4. else, download DEFAULT_COURSE_DOWNLOAD
    """
    course = args.course
    if course is None:
        single = ROOT / "DO_NOT_MERGE.SINGLE_COURSE"
        if single.is_file():
            # option 4: we read the course as if it was provided from the command line
            #           falling back to option 1 or 2
            with open(single, "rt") as f:
                course = Path("courses") / f.read().splitlines()[0]

    def artifact_to_downloaded_dir(artifact_name):
        return OUT / artifact_name

    def course_file_to_artifact(p: Path):
        ext_name = capitalize_words(p.with_suffix("").name.replace("_", " "))
        with open(p.parent / "course.toml", "rt") as f:
            return toml.load(f)["name"] + f" - {ext_name}"

    def course_file_to_pdf_name(downloaded_dir: Path, p: Path):
        return downloaded_dir / p.with_suffix(".pdf").name

    if course is not None:
        # course is set: option 1, 2
        cpath = ROOT / course
        if cpath.is_file():
            # 2. course is the name of a file
            artifact_name = course_file_to_artifact(cpath)
            if cpath.suffix == ".txt":
                # 2a. the artifact has a single PDF, because the file is a txt
                pdf_name = None
            else:
                # 2b. artifact has several PDF, we can know which one to read,
                #     from the name of the rst course provided
                assert cpath.suffix == ".rst", f"{cpath} is neither a rst nor a txt?"

                downloaded_dir = artifact_to_downloaded_dir(artifact_name)
                pdf_name = course_file_to_pdf_name(downloaded_dir, cpath)
        else:
            # 1. course is assumed to be the name of the artifact
            #    which is expected to contain a single PDF
            artifact_name = course
            pdf_name = None
    else:
        # course is unset: option 4
        artifact_name = DEFAULT_COURSE_DOWNLOAD
        pdf_name = None

    branch = args.branch
    if branch is None:
        branch = get_current_git_branch()

    if branch != "master":
        VALID_BRANCH_PREFIX = ("mr/", "build/", "slides/", "training/", "experimental/")
        if not any(branch.startswith(prefix) for prefix in VALID_BRANCH_PREFIX):
            print(
                f"branch name must start with one of {VALID_BRANCH_PREFIX}",
                file=sys.stderr,
            )
            print(f"you can create it with `git checkout -b build/{branch} {branch}`")
            sys.exit(1)

    latest_run = gh_latest_run(branch)
    if latest_run is None:
        print(f"no run found for {branch}")
        sys.exit(1)
    latest_run_id = latest_run["databaseId"]
    print(f"latest run for {branch} is {latest_run_id}")
    print(f"job URL is at {latest_run['url']}")
    if pdf_name is not None:
        print(f"download artifact {artifact_name!r} and open {pdf_name!r}")
    else:
        print(f"download artifact {artifact_name!r}")

    if latest_run["status"] != "completed":
        if args.do_not_wait:
            raise Exception(
                f"latest run for {branch} is {latest_run['status']!r} != 'completed'"
            )
        else:
            print(f"wait for completion [{latest_run['url']}]...")
            run_watch(latest_run["databaseId"], artifact_name)
    elif latest_run["conclusion"] != "success":
        raise Exception(f"latest run concluded in {latest_run['conclusion']}")

    downloaded_dir = artifact_to_downloaded_dir(artifact_name)
    print(f"download to {downloaded_dir}")

    if downloaded_dir.exists():
        shutil.rmtree(downloaded_dir)
    gh_run_download(latest_run_id, artifact_name, downloaded_dir)
    all_pdf = list(downloaded_dir.glob("*.pdf"))
    if pdf_name is None:
        print(", ".join([p.name for p in all_pdf]))
        if len(all_pdf) == 0:
            print("no slide found")
        elif len(all_pdf) > 1:
            print("multiple slide sets found")
        else:
            cmd.open(all_pdf[0])
    else:
        cmd.open(pdf_name)


if __name__ == "__main__":
    main()
